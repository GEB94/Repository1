import math

class Neurona:
    def __init__(self, n_inputs):
        self.n_inputs = n_inputs
        self.inputs = [1] * self.n_inputs
        self.weights = [1] * self.n_inputs
        self.b = 1

    def sigmoid(self, inputs, weights):
        x = sum(inputs[i] * weights[i] for i in range(self.n_inputs))
        x = x + self.b
        return 1 / (1 + math.exp(-x))

class NeuronalNetwork:
    def __init__(self):
        self.input_layer = [Neurona(2) for i in range(2)]
        self.hidden_layer = [Neurona(2) for i in range(3)]
        self.output_layer = [Neurona(3) for i in range(2)]

    def layers(self, inputs):   
        hidden_outputs = [n.sigmoid(inputs, n.weights) for n in self.hidden_layer]
        output = [n.sigmoid(hidden_outputs, n.weights) for n in self.output_layer]
        return output
      
    def error(output):
        error = [output[i] - [0, 1] for i in range(2)]
        return error

nn = NeuronalNetwork()

print(nn.layers([1, 0]))

