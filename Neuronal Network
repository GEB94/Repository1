import math
import random

class Neurona:
    def __init__(self, n_inputs):
        # Inicialització de les variables de la neurona
        self.n_inputs = n_inputs
        self.inputs = [random.random() for _ in range(n_inputs)]
        self.weights = [random.random() for _ in range(n_inputs)]
        self.b = 1

    def sigmoid(self, inputs, weights):
        # Càlculs funció sigmoide
        x = sum(inputs[i] * weights[i] for i in range(self.n_inputs))
        x = x + self.b
        return 1 / (1 + math.exp(-x))

class NeuronalNetwork:
    def __init__(self):
        # Crear xarxa neuronal
        self.layer1 = [Neurona(2) for _ in range(3)]  # Primera capa 3 neurones i 2 entrades
        self.layer2 = [Neurona(3) for _ in range(2)]  # Segona capa 2 neurones i 3 entrades

    def forward_propagation(self, x):
        # Propagació (endavant) de la xarxa
        s1 = [neuron.sigmoid(x, neuron.weights) for neuron in self.layer1]
        s2 = [neuron.sigmoid(s1, neuron.weights) for neuron in self.layer2]
        return s2

    def backward_propagation(self, x, y, lr):
        # Propagació (enrere) de la xarxa
        # Càlcul funció sigmoide
        s1 = [neuron.sigmoid(x, neuron.weights) for neuron in self.layer1]
        s2 = [neuron.sigmoid(s1, neuron.weights) for neuron in self.layer2]

        # Càlcul deltes layer 2
        delta_s2 = [a - y for a, y in zip(s2, y)]
        delta_z2 = [delta_s2[i] * s2[i] * (1 - s2[i]) for i in range(len(self.layer2))]
        
        # Actualització pesos layer 2
        for i in range(len(self.layer2)):
            for j in range(self.layer2[i].n_inputs):
                self.layer2[i].weights[j] = self.layer2[i].weights[j] - (lr * delta_z2[i] * s1[j])

        # Càlcul deltes layer 1
        delta_s1 = [sum(self.layer2[i].weights[j] * delta_z2[i] for i in range(len(self.layer2))) for j in range(len(self.layer1))]
        delta_z1 = [delta_s1[j] * s1[j] * (1 - s1[j]) for j in range(len(self.layer1))]

        # Actualització pesos layer 1
        for i in range(len(self.layer1)):
            for j in range(self.layer1[i].n_inputs):
                self.layer1[i].weights[j] = self.layer1[i].weights[j] - (lr * delta_z1[i] * x[j])

    def train(self, X, Y, reps, lr):
        # Entrenament de la xarxa neuronal
        for rep in range(reps):
            for x, y in zip(X, Y):
                self.backward_propagation(x, y, lr)


X = [[0, 0], [0, 1], [1, 0], [1, 1]]  # Entrades
Y = [[0, 0], [1, 0], [1, 0], [0, 1]]  # Sortides esperades

nn = NeuronalNetwork()
nn.train(X, Y, 5000, 0.25)

for x, y in zip(X, Y):
    y_pred = nn.forward_propagation(x)
    print(f"Input: {x}")
    print(f"Expected Output: {y}")
    print(f"Predicted Output: {y_pred}\n")

